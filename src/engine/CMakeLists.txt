add_library(status_macros INTERFACE status_macros.h)
target_link_libraries(status_macros INTERFACE absl::status)
target_link_libraries(status_macros INTERFACE absl::statusor)

add_library(bitmap INTERFACE bitmap.h)
target_link_libraries(bitmap INTERFACE absl::status)
target_link_libraries(bitmap INTERFACE absl::statusor)
target_link_libraries(bitmap INTERFACE absl::log)

add_library(vector INTERFACE vector.h)
target_link_libraries(vector INTERFACE absl::strings)
target_link_libraries(vector INTERFACE cereal::cereal)

add_library(util INTERFACE util.h)
target_link_libraries(util INTERFACE vector)

add_library(sprite_interface INTERFACE sprite_interface.h)
target_link_libraries(sprite_interface INTERFACE SDL2-static SDL2_image SDL2_ttf)

add_library(db_interface INTERFACE db_interface.h)
target_link_libraries(db_interface INTERFACE absl::status)
target_link_libraries(db_interface INTERFACE absl::statusor)
target_link_libraries(db_interface INTERFACE sprite_interface)
target_link_libraries(db_interface INTERFACE status_macros)

add_library(logging logging.cc)
target_link_libraries(logging absl::log)
target_link_libraries(logging absl::log_sink)
target_link_libraries(logging absl::flags)
target_link_libraries(logging absl::strings)

add_library(polygon polygon.cc)
target_link_libraries(polygon vector)

add_library(object_interface INTERFACE object_interface.h)
target_link_libraries(object_interface INTERFACE polygon)
target_link_libraries(object_interface INTERFACE vector)

add_library(config config.cc)
target_link_libraries(config absl::strings)
target_link_libraries(config absl::str_format)
target_link_libraries(config SDL2-static SDL2_image SDL2_ttf)
target_link_libraries(config nlohmann_json::nlohmann_json)

add_library(shape shape.cc)
target_link_libraries(shape sprite_interface)
target_link_libraries(shape vector)
target_link_libraries(shape polygon)

add_library(db db.cc)
target_link_libraries(db absl::strings)
target_link_libraries(db absl::status)
target_link_libraries(db absl::statusor)
target_link_libraries(db ${SQLITE3_LIBRARIES})
target_link_libraries(db status_macros)
target_link_libraries(db sprite_interface)
target_link_libraries(db db_interface)

add_library(controller controller.cc)
target_link_libraries(controller absl::log)
target_link_libraries(controller absl::status)
target_link_libraries(controller absl::statusor)
target_link_libraries(controller config)
target_link_libraries(controller SDL2-static SDL2_image SDL2_ttf)

add_library(focus INTERFACE focus.h)
target_link_libraries(focus INTERFACE controller)

add_library(sprite sprite.cc)
target_link_libraries(sprite sprite_interface)
target_link_libraries(sprite absl::strings)
target_link_libraries(sprite absl::status)
target_link_libraries(sprite SDL2-static SDL2_image SDL2_ttf)

add_library(camera_interface INTERFACE camera_interface.h)
target_link_libraries(camera_interface INTERFACE vector)
target_link_libraries(camera_interface INTERFACE absl::strings)
target_link_libraries(camera_interface INTERFACE absl::status)
target_link_libraries(camera_interface INTERFACE SDL2-static SDL2_image SDL2_ttf)

add_library(camera camera.cc)
target_link_libraries(camera camera_interface)
target_link_libraries(camera config)
target_link_libraries(camera vector)
target_link_libraries(camera absl::strings)
target_link_libraries(camera absl::status)
target_link_libraries(camera absl::statusor)
target_link_libraries(camera SDL2-static SDL2_image SDL2_ttf)

add_library(object object.cc)
target_link_libraries(object camera)
target_link_libraries(object sprite_interface)
target_link_libraries(object polygon)
target_link_libraries(object vector)
target_link_libraries(object absl::flat_hash_set)
target_link_libraries(object absl::strings)
target_link_libraries(object absl::status)
target_link_libraries(object SDL2-static SDL2_image SDL2_ttf)

add_library(sprite_object sprite_object.cc)
target_link_libraries(sprite_object camera)
target_link_libraries(sprite_object object)
target_link_libraries(sprite_object polygon)
target_link_libraries(sprite_object sprite_interface)
target_link_libraries(sprite_object vector)
target_link_libraries(sprite_object absl::flat_hash_set)
target_link_libraries(sprite_object absl::strings)
target_link_libraries(sprite_object absl::status)
target_link_libraries(sprite_object SDL2-static SDL2_image SDL2_ttf)

add_library(mobile_object mobile_object.cc)
target_link_libraries(mobile_object camera)
target_link_libraries(mobile_object object)
target_link_libraries(mobile_object polygon)
target_link_libraries(mobile_object sprite_interface)
target_link_libraries(mobile_object sprite_object)
target_link_libraries(mobile_object vector)
target_link_libraries(mobile_object absl::flat_hash_set)
target_link_libraries(mobile_object absl::strings)
target_link_libraries(mobile_object absl::status)
target_link_libraries(mobile_object SDL2-static SDL2_image SDL2_ttf)

add_library(sprite_manager sprite_manager.cc)
target_link_libraries(sprite_manager camera)
target_link_libraries(sprite_manager config)
target_link_libraries(sprite_manager object)
target_link_libraries(sprite_manager sprite_object)
target_link_libraries(sprite_manager mobile_object)
target_link_libraries(sprite_manager sprite)
target_link_libraries(sprite_manager sprite_interface)
target_link_libraries(sprite_manager absl::flat_hash_set)
target_link_libraries(sprite_manager absl::flat_hash_map)
target_link_libraries(sprite_manager absl::log)
target_link_libraries(sprite_manager absl::strings)
target_link_libraries(sprite_manager absl::status)
target_link_libraries(sprite_manager absl::statusor)
target_link_libraries(sprite_manager SDL2-static SDL2_image SDL2_ttf)
target_link_libraries(sprite_manager ${SQLITE3_LIBRARIES})

add_library(collision_manager collision_manager.cc)
target_link_libraries(collision_manager absl::flat_hash_map)
target_link_libraries(collision_manager absl::flat_hash_set)
target_link_libraries(collision_manager absl::log)
target_link_libraries(collision_manager absl::status)
target_link_libraries(collision_manager absl::strings)
target_link_libraries(collision_manager config)
target_link_libraries(collision_manager object)
target_link_libraries(collision_manager polygon)
target_link_libraries(collision_manager vector)

add_library(scene_manager scene_manager.cc)
target_link_libraries(scene_manager camera)
target_link_libraries(scene_manager config)
target_link_libraries(scene_manager collision_manager)
target_link_libraries(scene_manager sprite_manager)
target_link_libraries(scene_manager mobile_object)
target_link_libraries(scene_manager sprite_object)
target_link_libraries(scene_manager status_macros)
target_link_libraries(scene_manager absl::flat_hash_set)
target_link_libraries(scene_manager absl::strings)
target_link_libraries(scene_manager absl::status)
target_link_libraries(scene_manager SDL2-static SDL2_image SDL2_ttf)

add_library(creator creator.cc)
target_link_libraries(creator absl::flat_hash_map)
target_link_libraries(creator absl::flat_hash_set)
target_link_libraries(creator camera_interface)
target_link_libraries(creator config)
target_link_libraries(creator controller)
target_link_libraries(creator focus)
target_link_libraries(creator shape)
target_link_libraries(creator vector)
target_link_libraries(creator util)
target_link_libraries(creator nlohmann_json::nlohmann_json)

add_library(player player.cc)
target_link_libraries(player controller)
target_link_libraries(player camera)
target_link_libraries(player config)
target_link_libraries(player focus)
target_link_libraries(player object)
target_link_libraries(player mobile_object)
target_link_libraries(player sprite)
target_link_libraries(player absl::log)
target_link_libraries(player absl::strings)
target_link_libraries(player absl::status)
target_link_libraries(player SDL2-static SDL2_image)

add_library(map map.cc)
target_link_libraries(map camera)
target_link_libraries(map config)
target_link_libraries(map absl::strings)
target_link_libraries(map absl::status)
target_link_libraries(map SDL2main SDL2-static SDL2_image)

add_library(hud hud.cc)
target_link_libraries(hud camera)
target_link_libraries(hud config)
target_link_libraries(hud logging)
target_link_libraries(hud player)
target_link_libraries(hud absl::log)
target_link_libraries(hud absl::status)
target_link_libraries(hud absl::strings)
target_link_libraries(hud SDL2-static SDL2_image)
target_link_libraries(hud ${IMGUI_LIBRARIES})

add_library(engine game.cc)
target_link_libraries(engine camera)
target_link_libraries(engine config)
target_link_libraries(engine collision_manager)
target_link_libraries(engine controller)
target_link_libraries(engine creator)
target_link_libraries(engine db)
target_link_libraries(engine focus)
target_link_libraries(engine hud)
target_link_libraries(engine map)
target_link_libraries(engine object)
target_link_libraries(engine player)
target_link_libraries(engine sprite)
target_link_libraries(engine sprite_interface)
target_link_libraries(engine sprite_manager)
target_link_libraries(engine status_macros)
target_link_libraries(engine scene_manager)
target_link_libraries(engine absl::log)
target_link_libraries(engine absl::status)
target_link_libraries(engine SDL2-static SDL2_image SDL2_ttf)
target_link_libraries(engine ${IMGUI_LIBRARIES})